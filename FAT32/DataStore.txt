FAT32文件系统，将几个扇区组成一个簇作为索引单位，簇的大小视分区容量而定，初始化值如下对应。
 * fs size <= 260M: 0.5k clusters
 * fs size <=   8G: 4k clusters
 * fs size <=  16G: 8k clusters
 * fs size >   16G: 16k clusters
但是后面还需微调，容量/簇大小≈簇个数，当簇个数超上限时，
/* M$ says the high 4 bits of a FAT32 FAT entry are reserved and don't belong
 * to the cluster number. So the max. cluster# is based on 2^28 */
#define MAX_CLUST_32    ((1 << 28) - 16)
就需要增加簇大小，当然簇大小本身也有个上限64K。


其总体结构如下:
[引导扇区][其余保留扇区][FAT1][FAT2][根文件夹首簇][其它文件夹及文件][剩余扇区]

关键的数据结构，参考dosfstools-3.0.12/src/mkdosfs.c
struct msdos_volume_info {
    __u8 drive_number;      /* BIOS drive number */
    __u8 RESERVED;      /* Unused */
    __u8 ext_boot_sign;     /* 0x29 if fields below exist (DOS 3.3+) */
    __u8 volume_id[4];      /* Volume ID number */
    __u8 volume_label[11];  /* Volume label */
    __u8 fs_type[8];        /* Typically FAT12 or FAT16 */
} __attribute__ ((packed));

struct msdos_boot_sector {
    __u8 boot_jump[3];      /* Boot strap short or near jump */
    __u8 system_id[8];      /* Name - can be used to special case
                   partition manager volumes */
    __u8 sector_size[2];    /* bytes per logical sector */
    __u8 cluster_size;      /* sectors/cluster */
    __u16 reserved;     /* reserved sectors */ // 一般为32，1个引导扇区和31个其它保留扇区
    __u8 fats;          /* number of FATs */ // FAT表实际个数，一般为2
    __u8 dir_entries[2];    /* root directory entries */
    __u8 sectors[2];        /* number of sectors */
    __u8 media;         /* media code (unused) */
    __u16 fat_length;       /* sectors/FAT */
    __u16 secs_track;       /* sectors per track */
    __u16 heads;        /* number of heads */
    __u32 hidden;       /* hidden sectors (unused) */
    __u32 total_sect;       /* number of sectors (if sectors == 0) */
    union {
    struct {
        struct msdos_volume_info vi;
        __u8 boot_code[BOOTCODE_SIZE];
    } __attribute__ ((packed)) _oldfat;
    struct {
        __u32 fat32_length; /* sectors/FAT */
        __u16 flags;    /* bit 8: fat mirroring, low 4: active fat */
        __u8 version[2];    /* major, minor filesystem version */
        __u32 root_cluster; /* first cluster in root directory */ // 根目录本身的簇号，一般为2
        __u16 info_sector;  /* filesystem info sector */
        __u16 backup_boot;  /* backup boot sector */
        __u16 reserved2[6]; /* Unused */
        struct msdos_volume_info vi;
        __u8 boot_code[BOOTCODE_FAT32_SIZE];
    } __attribute__ ((packed)) _fat32;
    } __attribute__ ((packed)) fstype;

    __u16 boot_sign;
} __attribute__ ((packed));

struct fat32_fsinfo {
    __u32 reserved1;        /* Nothing as far as I can tell */
    __u32 signature;        /* 0x61417272L */
    __u32 free_clusters;    /* Free cluster count.  -1 if unknown */
    __u32 next_cluster;     /* Most recently allocated cluster.
                 * Unused under Linux. */
    __u32 reserved2[4];
};

struct msdos_dir_entry {
    char name[8], ext[3];   /* name and extension */
    __u8 attr;          /* attribute bits */
    __u8 lcase;         /* Case for base and extension */
    __u8 ctime_ms;      /* Creation time, milliseconds */
    __u16 ctime;        /* Creation time */
    __u16 cdate;        /* Creation date */
    __u16 adate;        /* Last access date */
    __u16 starthi;      /* high 16 bits of first cl. (FAT32) */
    __u16 time, date, start;    /* time, date and first cluster */
    __u32 size;         /* file size (in bytes) */
} __attribute__ ((packed));

下面进行实验

[root@localhost ~]$ ./mkdosfs -F 32 /dev/sda1
[root@localhost ~]$ hexdump -C -n 16384 /dev/sda1
00000000  eb 58 90 6d 6b 64 6f 73  66 73 00 00 02 20 20 00  |.X.mkdosfs...  .|
00000010  02 00 00 00 00 f8 00 00  3f 00 ff 00 00 00 00 00  |........?.......|
00000020  30 58 98 39 20 99 03 00  00 00 00 00 02 00 00 00  |0X.9 ...........|
00000030  01 00 06 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 29 ea 4a bb 9f 20  20 20 20 20 20 20 20 20  |..).J..         |
00000050  20 20 46 41 54 33 32 20  20 20 0e 1f be 77 7c ac  |  FAT32   ...w|.|
00000060  22 c0 74 0b 56 b4 0e bb  07 00 cd 10 5e eb f0 32  |".t.V.......^..2|
00000070  e4 cd 16 cd 19 eb fe 54  68 69 73 20 69 73 20 6e  |.......This is n|
00000080  6f 74 20 61 20 62 6f 6f  74 61 62 6c 65 20 64 69  |ot a bootable di|
00000090  73 6b 2e 20 20 50 6c 65  61 73 65 20 69 6e 73 65  |sk.  Please inse|
000000a0  72 74 20 61 20 62 6f 6f  74 61 62 6c 65 20 66 6c  |rt a bootable fl|
000000b0  6f 70 70 79 20 61 6e 64  0d 0a 70 72 65 73 73 20  |oppy and..press |
000000c0  61 6e 79 20 6b 65 79 20  74 6f 20 74 72 79 20 61  |any key to try a|
000000d0  67 61 69 6e 20 2e 2e 2e  20 0d 0a 00 00 00 00 00  |gain ... .......|
000000e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 55 aa  |..............U.|
00000200  52 52 61 41 00 00 00 00  00 00 00 00 00 00 00 00  |RRaA............|
00000210  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000003e0  00 00 00 00 72 72 41 61  2d 89 cc 01 02 00 00 00  |....rrAa-.......|
000003f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 55 aa  |..............U.|
00000400  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000c00  eb 58 90 6d 6b 64 6f 73  66 73 00 00 02 20 20 00  |.X.mkdosfs...  .|
00000c10  02 00 00 00 00 f8 00 00  3f 00 ff 00 00 00 00 00  |........?.......|
00000c20  30 58 98 39 20 99 03 00  00 00 00 00 02 00 00 00  |0X.9 ...........|
00000c30  01 00 06 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000c40  00 00 29 ea 4a bb 9f 20  20 20 20 20 20 20 20 20  |..).J..         |
00000c50  20 20 46 41 54 33 32 20  20 20 0e 1f be 77 7c ac  |  FAT32   ...w|.|
00000c60  22 c0 74 0b 56 b4 0e bb  07 00 cd 10 5e eb f0 32  |".t.V.......^..2|
00000c70  e4 cd 16 cd 19 eb fe 54  68 69 73 20 69 73 20 6e  |.......This is n|
00000c80  6f 74 20 61 20 62 6f 6f  74 61 62 6c 65 20 64 69  |ot a bootable di|
00000c90  73 6b 2e 20 20 50 6c 65  61 73 65 20 69 6e 73 65  |sk.  Please inse|
00000ca0  72 74 20 61 20 62 6f 6f  74 61 62 6c 65 20 66 6c  |rt a bootable fl|
00000cb0  6f 70 70 79 20 61 6e 64  0d 0a 70 72 65 73 73 20  |oppy and..press |
00000cc0  61 6e 79 20 6b 65 79 20  74 6f 20 74 72 79 20 61  |any key to try a|
00000cd0  67 61 69 6e 20 2e 2e 2e  20 0d 0a 00 00 00 00 00  |gain ... .......|
00000ce0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000df0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 55 aa  |..............U.|
00000e00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00004000

扇区大小默认为512Byte，上面第[0]扇区地址0x00000000-0x000001ff，对应于 struct msdos_boot_sector，
主要用于引导分区上的操作系统的，也叫DBR区 (DOS BOOT RECORD)。
其中的 [msdos_boot_sector.sector_size, msdos_boot_sector.boot_code)间被称为 BPB(BIOS Parameter Block)，包含文件系统的基本参数。
如果只用来存放数据的话，引导代码可以省略，但 WindowsXP上boot_jump[3]这个跳转不能省略。

msdos_boot_sector.sector_size=0x0200，扇区的大小为512Byte。

msdos_boot_sector.cluster_size=0x20，每个簇有32个扇区，也就是16KB大小。
msdos_boot_sector.fstype._fat32.backup_boot=0x0006，指向第[6]扇区，是引导扇区的备份。
msdos_boot_sector.fstype._fat32.info_sector=0x0001，指向第[1]扇区，对应于struct fat32_fsinfo
msdos_boot_sector.reserved=0x0020， 保留扇区个数为32个，也就是16KB，这里的保留扇区包含前面的引导扇区等。
上面只使用了3个保留扇区，但是一般Window操作系统上 msdos_boot_sector.fstype._fat32.boot_code[BOOTCODE_FAT32_SIZE]不够用，
引导代码还会征用其它保留扇区。

msdos_boot_sector.fstype._fat32.root_cluster=0x00000002，说明根目录的开始簇号，其实根目前面的那些空间不进行簇编号，从根目录处以[2]开始编号。
FAT表紧跟在在保留扇区后面，也就是在第[msdos_boot_sector.reserved]扇区，0x0020 * 512 == 16KB
[root@localhost ~]$ hexdump -C -n 16384 -s 16k /dev/sda1     
00004000  f8 ff ff 0f ff ff ff 0f  f8 ff ff 0f 00 00 00 00  |................|
00004010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00008000

FAT32用32Bit表示簇号，上面的第[0]字0x0ffffff8表示存储介质为硬盘，第[1]字0x0fffffff表示文件结束簇，
第[2]字对应前面的 msdos_boot_sector.fstype._fat32.root_cluster，0x0ffffff8在这表示文件结束簇，也就是根目录只占用一个簇，
后面都第[3+]字都是0x00000000表示未分配的簇。

FAT表也有备份，紧跟着它后面，也就是在第 [msdos_boot_sector.reserved + msdos_boot_sector.fstype._fat32.fat32_length] 扇区，
(0x0020 + 0x00039920) * 512 == 117920KB
[root@localhost ~]$ hexdump -C -n 16384 -s 117920k /dev/sda1
07328000  f8 ff ff 0f ff ff ff 0f  f8 ff ff 0f 00 00 00 00  |................|
07328010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0732c000

FAT备份表后面是根文件夹首簇，也就是它内容的最前面的一些数据，
在 [msdos_boot_sector.reserved + msdos_boot_sector.fstype._fat32.fat32_length * 2] 扇区，
(0x0020 + 0x00039920 * 2) * 512 == 235824KB

[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1       
0e64c000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e64d800

没有数据，是因为没有分配卷标的情况下数据为空
[root@localhost ~]$ ./mkdosfs -F 32 -n c_pan /dev/sda1
[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1
0e64c000  63 5f 70 61 6e 20 20 20  20 20 20 08 00 00 0a 6d  |c_pan      ....m|
0e64c010  73 42 73 42 00 00 0a 6d  73 42 00 00 00 00 00 00  |sBsB...msB......|
0e64c020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e64d800

根文件首簇地址0x0e64c000，对应的簇号是msdos_boot_sector.fstype._fat32.root_cluster=0x00000002，此后每前进一个簇的距离(16KB)，簇号增加1。

FAT32 的文件夹(目录)是和文件的记录相似，内容则是它下层文件/文件夹的记录。从根目录的簇号以及根目录内容所在的簇，可以确定簇号和地址的映射关系。
先通过树形算法，层层查找到文件/文件夹的记录，然后对应开始簇号 (msdos_dir_entry.starthi << 16 + msdos_dir_entry.start)。
根据簇号和地址的映射关系，就能找到文件内容的第一数据块(簇)在哪。如果文件的内容一个簇放不下，则根据开始簇号去FAT表查看它的内容的
下一个数据块(簇)所在在簇号，FAT表是链表的形式，能继续查找到下下一个数据块，直到遇到结束簇。

接下来做文件操作实验
[root@localhost ~]$ ./mkdosfs -F 32 /dev/sda1
mkdosfs 3.0.12 (29 Oct 2011)
[root@localhost ~]$ mount -t vfat /dev/sda1 /var/
[root@localhost ~]$ echo best regard to you. > /var/Greet.txt
[root@localhost ~]$ umount /var/
查看FAT表（当时用到备份FAT表了，下面本该是-s 16k）
[root@localhost ~]$ hexdump -C -n 16384 -s 117920k /dev/sda1

07328000  f8 ff ff 0f ff ff ff 0f  f8 ff ff 0f ff ff ff 0f  |................|
07328010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0732c000
可知第[3]簇被使用了，0x0fffffff表示文件结束簇，也就是该文件占用1簇的空间，第[3]簇的地址算法，上面已经走通了，查看文件的内容
[root@localhost ~]$ hexdump -C -n 16384 -s 235840k /dev/sda1  
0e650000  62 65 73 74 20 72 65 67  61 72 64 20 74 6f 20 79  |best regard to y|
0e650010  6f 75 2e 0a 00 00 00 00  00 00 00 00 00 00 00 00  |ou..............|
0e650020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e654000
文件是创建在根目录下，查看文件根目录
[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1
0e64c000  41 47 00 72 00 65 00 65  00 74 00 0f 00 97 2e 00  |AG.r.e.e.t......|
0e64c010  74 00 78 00 74 00 00 00  ff ff 00 00 ff ff ff ff  |t.x.t...........|
0e64c020  47 52 45 45 54 20 20 20  54 58 54 20 00 00 a5 a0  |GREET   TXT ....|
0e64c030  73 42 73 42 00 00 a5 a0  73 42 03 00 14 00 00 00  |sBsB....sB......|
0e64c040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e650000
可以看出0x0e64c020才是struct msdos_dir_entry，并且文件名没有区分大小写。
msdos_dir_entry.starthi << 16 + msdos_dir_entry.start == 0x0000 << 16 + 0x0003 ==  0x00000003，
说明开始簇号是[3]，正好对应上面FAT表中新消耗的记录项。0x0e64c000 是什么呢？msdos_dir_entry只能支持8.3短文件名，前面的当然是长文件名的结构。
数据结构，参考dosfstools-3.0.12/src/mkdosfs.c
typedef struct {
    __u8 id;            /* sequence number for slot */
    __u8 name0_4[10];       /* first 5 characters in name */
    __u8 attr;          /* attribute byte */
    __u8 reserved;      /* always 0 */
    __u8 alias_checksum;    /* checksum for 8.3 alias */
    __u8 name5_10[12];      /* 6 more characters in name */
    __u16 start;        /* starting cluster number, 0 in long slots */
    __u8 name11_12[4];      /* last 2 characters in name */
} LFN_ENT;
LFN_ENT.id=0x41，只有前5bit表示编号，也就是编号为1，第[6]bit表示长文件最后一个目录项，因为只有一个目录项所以该bit为1，
于是有了01000001B=0x41。长文件名是unicode编码，看上去能支持文件名长度13个字符，超过13个怎么办？
[root@localhost ~]$ mount -t vfat /dev/sda1 /var/
[root@localhost ~]$ echo hello long filename. > /var/morethanten.txt
[root@localhost ~]$ umount /var/
[root@localhost ~]$ hexdump -C -n 16384 -s 117920k /dev/sda1
07328000  f8 ff ff 0f ff ff ff 0f  f8 ff ff 0f ff ff ff 0f  |................|
07328010  ff ff ff 0f 00 00 00 00  00 00 00 00 00 00 00 00  |................|
07328020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0732c000
[root@localhost ~]$ hexdump -C -n 16384 -s 235856k /dev/sda1
0e654000  68 65 6c 6c 6f 20 6c 6f  6e 67 20 66 69 6c 65 6e  |hello long filen|
0e654010  61 6d 65 2e 0a 00 00 00  00 00 00 00 00 00 00 00  |ame.............|
0e654020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e658000
[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1
0e64c000  - 0e64c03f略
0e64c040  42 78 00 74 00 00 00 ff  ff ff ff 0f 00 c9 ff ff  |Bx.t............|
0e64c050  ff ff ff ff ff ff ff ff  ff ff 00 00 ff ff ff ff  |................|
0e64c060  01 6d 00 6f 00 72 00 65  00 74 00 0f 00 c9 68 00  |.m.o.r.e.t....h.|
0e64c070  61 00 6e 00 74 00 65 00  6e 00 00 00 2e 00 74 00  |a.n.t.e.n.....t.|
0e64c080  4d 4f 52 45 54 48 7e 31  54 58 54 20 00 00 b8 a0  |MORETH~1TXT ....|
0e64c090  73 42 73 42 00 00 b8 a0  73 42 04 00 15 00 00 00  |sBsB....sB......|
0e64c0a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
长文件名被分开成两份，一份morethanten.t，一份是xt，也就是后缀名和文件名是个整体，中间的点'.'也算。
LFN_ENT.id=分别为0x01, 0x42，表示第一二项的顺序。创建一个更长的文件名。
[root@localhost ~]$ mount -t vfat /dev/sda1 /var/
[root@localhost ~]$ echo long long filename > /var/name_suffix___bigger_than26     
[root@localhost ~]$ umount /var/
[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1
0e64c000  - 0e64c09f略
0e64c0a0  43 36 00 00 00 ff ff ff  ff ff ff 0f 00 50 ff ff  |C6...........P..|
0e64c0b0  ff ff ff ff ff ff ff ff  ff ff 00 00 ff ff ff ff  |................|
0e64c0c0  02 5f 00 62 00 69 00 67  00 67 00 0f 00 50 65 00  |._.b.i.g.g...Pe.|
0e64c0d0  72 00 5f 00 74 00 68 00  61 00 00 00 6e 00 32 00  |r._.t.h.a...n.2.|
0e64c0e0  01 6e 00 61 00 6d 00 65  00 5f 00 0f 00 50 73 00  |.n.a.m.e._...Ps.|
0e64c0f0  75 00 66 00 66 00 69 00  78 00 00 00 5f 00 5f 00  |u.f.f.i.x..._._.|
0e64c100  4e 41 4d 45 5f 53 7e 31  20 20 20 20 00 00 f4 48  |NAME_S~1    ...H|
0e64c110  74 42 74 42 00 00 f4 48  74 42 05 00 13 00 00 00  |tBtB...HtB......|
0e64c120  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e650000
长文件名被分开成三份，LFN_ENT.id=分别为0x01, 0x02, 0x43，表示第一二三项的顺序.

创建一个超过一簇大小的文件
[root@localhost ~]$ ls -l Bigger16KB.log 
-rwxr--r--    1     35450 Bigger16KB.log
[root@localhost ~]$ mount -t vfat /dev/sda1 /var/
[root@localhost ~]$ cp Bigger16KB.log /var/
[root@localhost ~]$ umount /var/

[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1
0e64c000  - 0e64c11f略
0e64c120  42 67 00 00 00 ff ff ff  ff ff ff 0f 00 ae ff ff  |Bg..............|
0e64c130  ff ff ff ff ff ff ff ff  ff ff 00 00 ff ff ff ff  |................|
0e64c140  01 42 00 69 00 67 00 67  00 65 00 0f 00 ae 72 00  |.B.i.g.g.e....r.|
0e64c150  31 00 36 00 4b 00 42 00  2e 00 00 00 6c 00 6f 00  |1.6.K.B.....l.o.|
0e64c160  42 49 47 47 45 52 7e 31  4c 4f 47 20 00 64 db 55  |BIGGER~1LOG .d.U|
0e64c170  74 42 74 42 00 00 db 55  74 42 06 00 7a 8a 00 00  |tBtB...UtB..z...|
0e64c180  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e650000

说明文件的开始簇号是0x06
[root@localhost ~]$ hexdump -C -n 16384 -s 117920k /dev/sda1
07328000  f8 ff ff 0f ff ff ff 0f  f8 ff ff 0f ff ff ff 0f  |................|
07328010  ff ff ff 0f ff ff ff 0f  07 00 00 00 08 00 00 00  |................|
07328020  ff ff ff 0f 00 00 00 00  00 00 00 00 00 00 00 00  |................|
07328030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0732c000
可以看出，占用三个簇 07 00 00 00 08 00 00 00 ff ff ff 0f， 第[6]簇上是0x00000007，不是物理/逻辑地址映射，而是簇链地址，也就是
文件的数据在第[6]簇上放不下，后面的数据放在第[7]簇上，第[7]簇上也放不下，后面的数据放在第[8]簇上，第[8]簇上终于放下了，
于是就有了0x0fffffff文件结束簇标志。 可以根据簇号->地址映射找到文件的内容。
[root@localhost ~]$ hexdump -C -n 49152 -s 235888k /dev/sda1     
0e65c000 内容略

删除morethanten.txt文件后
[root@localhost ~]$ hexdump -C -n 16384 -s 117920k /dev/sda1
07328000  f8 ff ff 0f ff ff ff 0f  f8 ff ff 0f ff ff ff 0f  |................|
07328010  00 00 00 00 ff ff ff 0f  07 00 00 00 08 00 00 00  |................|
07328020  ff ff ff 0f 00 00 00 00  00 00 00 00 00 00 00 00  |................|
07328030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0732c000
可以看出，所占据的第[4]簇号，已经为0x00000000，表示未分配的簇。
[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1
0e64c000  - 0e64c03f略
0e64c040  e578 00 74 00 00 00 ff  ff ff ff 0f 00 c9 ff ff  |Bx.t............|
0e64c050  ff ff ff ff ff ff ff ff  ff ff 00 00 ff ff ff ff  |................|
0e64c060  e56d 00 6f 00 72 00 65  00 74 00 0f 00 c9 68 00  |.m.o.r.e.t....h.|
0e64c070  61 00 6e 00 74 00 65 00  6e 00 00 00 2e 00 74 00  |a.n.t.e.n.....t.|
0e64c080  e54f 52 45 54 48 7e 31  54 58 54 20 00 00 b8 a0  |MORETH~1TXT ....|
0e64c090  73 42 73 42 00 00 b8 a0  73 42 04 00 15 00 00 00  |sBsB....sB......|
0e64c0a0  - 0e64c17f略
*
0e650000
可以看出目录项还在，只是前面被标记成0xe5了。
[root@localhost ~]$ hexdump -C -n 16384 -s 235856k /dev/sda1
0e654000  68 65 6c 6c 6f 20 6c 6f  6e 67 20 66 69 6c 65 6e  |hello long filen|
0e654010  61 6d 65 2e 0a 00 00 00  00 00 00 00 00 00 00 00  |ame.............|
0e654020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e658000
文件的内容无损。经测试手动将FAT表和目录项改回，文件就回来了。但是反推出正确文件名还是要再详细分析的。

再创建一个文件
[root@localhost ~]$ hexdump -C -n 16384 -s 117920k /dev/sda1
07328000  f8 ff ff 0f ff ff ff 0f  f8 ff ff 0f ff ff ff 0f  |................|
07328010  00 00 00 00 ff ff ff 0f  07 00 00 00 08 00 00 00  |................|
07328020  ff ff ff 0f 0a 00 00 00  0b 00 00 00 0c 00 00 00  |................|
07328030  0d 00 00 00 0e 00 00 00  0f 00 00 00 10 00 00 00  |................|
07328040  11 00 00 00 12 00 00 00  13 00 00 00 14 00 00 00  |................|
07328050  15 00 00 00 16 00 00 00  17 00 00 00 18 00 00 00  |................|
07328060  19 00 00 00 1a 00 00 00  1b 00 00 00 1c 00 00 00  |................|
07328070  ff ff ff 0f 00 00 00 00  00 00 00 00 00 00 00 00  |................|
07328080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0732c000
可以看出，删除后的那个簇号，没有被立即覆盖，估计能保持到可用空间都用完了，才会去使用那些删除过的簇。
接下来创建一个文件夹(目录)myDir
[root@localhost ~]$ hexdump -C -n 16384 -s 117920k /dev/sda1
07328000  - 0732806f略
07328070  ff ff ff 0f ff ff ff 0f  00 00 00 00 00 00 00 00  |................|
07328080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0732c000
和文件一样，占用一个FAT记录。看看根目录的内容
[root@localhost ~]$ hexdump -C -n 16384 -s 235824k /dev/sda1
0e64c000  - 0e64c17f略
0e64c180  41 6d 00 79 00 44 00 69  00 72 00 0f 00 56 00 00  |Am.y.D.i.r...V..|
0e64c190  ff ff ff ff ff ff ff ff  ff ff 00 00 ff ff ff ff  |................|
0e64c1a0  4d 59 44 49 52 20 20 20  20 20 20 10 00 64 10 6b  |MYDIR      ..d.k|
0e64c1b0  74 42 74 42 00 00 10 6b  74 42 1d 00 00 00 00 00  |tBtB...ktB......|
0e64c1c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e650000
和文件一样，在上层目录下占用一个记录。根据首簇号，0x001d计算文件夹的内容在
[root@localhost ~]$ hexdump -C -n 16384 -s 236256k /dev/sda1
0e6b8000  2e 20 20 20 20 20 20 20  20 20 20 10 00 64 10 6b  |.          ..d.k|
0e6b8010  74 42 74 42 00 00 10 6b  74 42 1d 00 00 00 00 00  |tBtB...ktB......|
0e6b8020  2e 2e 20 20 20 20 20 20  20 20 20 10 00 64 10 6b  |..         ..d.k|
0e6b8030  74 42 74 42 00 00 10 6b  74 42 00 00 00 00 00 00  |tBtB...ktB......|
0e6b8040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e6bc000
和根目录一样，内容是下层文件/文件夹的记录，这里有.和..两个链接文件，没有长文件名。
在该文件夹下创建普通文件后，再看看文件夹的内容
[root@localhost ~]$ hexdump -C -n 16384 -s 236256k /dev/sda1
0e6b8000  - 0e6b803f略
0e6b8040  41 73 00 75 00 62 00 66  00 00 00 0f 00 0b ff ff  |As.u.b.f........|
0e6b8050  ff ff ff ff ff ff ff ff  ff ff 00 00 ff ff ff ff  |................|
0e6b8060  53 55 42 46 20 20 20 20  20 20 20 20 00 64 0a 6c  |SUBF        .d.l|
0e6b8070  74 42 74 42 00 00 0a 6c  74 42 1e 00 09 00 00 00  |tBtB...ltB......|
0e6b8080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0e6bc000
是多了一条文件记录。

如果根目录是有卷标的，创建文件后，文件记录紧跟着卷标记录。
[root@localhost ~]$ ./mkdosfs -F 32 -n c_pan /dev/sda1
0e64c000  - 0e64c01f略
0e64c020  41 47 00 72 00 65 00 65  00 74 00 0f 00 97 2e 00  |AG.r.e.e.t......|
0e64c030  74 00 78 00 74 00 00 00  ff ff 00 00 ff ff ff ff  |t.x.t...........|
0e64c040  47 52 45 45 54 20 20 20  54 58 54 20 00 00 ba 6e  |GREET   TXT ...n|
0e64c050  74 42 74 42 00 00 ba 6e  74 42 00 00 00 00 00 00  |tBtB...ntB......|
*
0e650000
奇怪，最后6Byte似乎没写入，难不成只有一个文件时没必要？再创建一个文件时能看到值
0e64c050  74 42 74 42 00 00 ba 6e  74 42 03 00 14 00 00 00  |tBtB...ntB......|
卷标也是只有短文件名。


